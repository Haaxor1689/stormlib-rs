name: Rust CI (On Demand)

on:
  workflow_dispatch:
    inputs:
      run_codegen:
        description: 'Generate and push bindings for all platforms'
        required: false
        default: 'false'
        type: boolean
      run_tests:
        description: 'Run tests on all platforms'
        required: false
        default: 'true' # Often default tests to true
        type: boolean
      target_branch:
        description: 'Branch to run on (e.g., master)'
        required: true
        default: 'master'
        type: string

env:
  CARGO_TERM_COLOR: always

jobs:
  codegen:
    name: Code Generation & Push
    runs-on: ${{ matrix.os }} # Run on all OS for generation
    # Only run codegen if 'run_codegen' input is true AND on the target branch
    if: |
      github.event_name == 'workflow_dispatch' &&
      github.event.inputs.run_codegen == 'true' &&
      github.ref == format('refs/heads/{0}', github.event.inputs.target_branch)

    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
        include:
          - os: windows-latest
            LIBCLANG_PATH: "C:\\Program Files\\LLVM\\bin"

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
          # Checkout the specified target branch for codegen
          ref: ${{ github.event.inputs.target_branch }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install LLVM (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y clang libclang-dev

      - name: Install LLVM (Windows)
        if: runner.os == 'Windows'
        uses: egor-tensin/setup-clang@v1
        with:
          version: latest

      - name: Regenerate Bindings
        id: generate_bindings
        shell: bash
        run: |
          echo "Starting binding regeneration for ${{ runner.os }}..."

          cargo build -p stormlib-bindgen --release
          cargo run -p stormlib-bindgen --release

          generated_file="crates/stormlib-sys/src/bindings_${{ runner.os == 'Windows' && 'windows' || runner.os == 'Linux' && 'linux' || runner.os == 'macos' }}.rs"
          git add "$generated_file"

          if ! git diff-index --quiet --cached HEAD; then
            echo "Detected changes in generated bindings for ${{ runner.os }}."
            echo "bindings_changed=true" >> "$GITHUB_OUTPUT"
          else
            echo "No changes detected in generated bindings for ${{ runner.os }}."
          fi
          echo "bindings_changed status: ${{ steps.generate_bindings.outputs.bindings_changed }}"
        working-directory: ${{ github.workspace }}

      - name: Commit and Push Changes (with retry for merge conflicts)
        shell: bash
        # This step only runs if bindings changed AND we are on the target branch
        if: |
          steps.generate_bindings.outputs.bindings_changed == 'true' &&
          github.ref == format('refs/heads/{0}', github.event.inputs.target_branch)
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          MAX_RETRIES=5
          RETRY_DELAY_SECONDS=5

          generated_file="crates/stormlib-sys/src/bindings_${{ runner.os == 'Windows' && 'windows' || runner.os == 'Linux' && 'linux' || runner.os == 'macos' }}.rs"

          echo "Stashing *staged* changes before git pull --rebase..."
          git stash --staged || true

          STASH_COUNT=$(git stash list | wc -l)
          if [[ "$STASH_COUNT" -eq 0 ]]; then
            echo "No staged changes found to stash. Skipping commit/push for ${{ runner.os }}."
            exit 0
          fi

          for i in $(seq 1 $MAX_RETRIES); do
            echo "Attempt $i to commit and push bindings for ${{ runner.os }}..."
            
            git fetch origin ${{ github.event.inputs.target_branch }} || {
              echo "Git fetch failed. Retrying in $RETRY_DELAY_SECONDS seconds..."
              sleep $RETRY_DELAY_SECONDS
              continue
            }

            git rebase origin/${{ github.event.inputs.target_branch }} || {
              echo "Git rebase failed. Retrying in $RETRY_DELAY_SECONDS seconds..."
              git stash pop || true
              sleep $RETRY_DELAY_SECONDS
              continue
            }
            
            echo "Applying stashed changes..."
            git stash pop --index || {
              echo "Git stash pop failed. Exiting."
              exit 1
            }
            
            if git diff-index --quiet --cached HEAD; then
                echo "No changes to commit after rebase and reapplying stash. Skipping push for ${{ runner.os }}."
                exit 0
            fi

            git commit -m "chore(bindings): Auto-regenerate bindings for ${{ runner.os }}" && \
            git push origin HEAD:${{ github.event.inputs.target_branch }} && \
            echo "Changes committed and pushed successfully for ${{ runner.os }}." && \
            exit 0 || {
              echo "Git push failed for ${{ runner.os }}. Retrying in $RETRY_DELAY_SECONDS seconds..."
              sleep $RETRY_DELAY_SECONDS
            }
          done

          echo "Failed to commit and push bindings for ${{ runner.os }} after $MAX_RETRIES attempts."
          exit 1
        working-directory: ${{ github.workspace }}

  test_on_demand:
    name: Run Tests
