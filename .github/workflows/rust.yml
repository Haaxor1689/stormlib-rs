name: Rust CI

on:
  push:
    branches: [master]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  codegen:
    runs-on: ubuntu-latest # Using Ubuntu for centralized generation
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install LLVM (Ubuntu)
        run: |
          sudo apt-get update
          sudo apt-get install -y clang libclang-dev

      - name: Regenerate Bindings
        id: generate_bindings
        shell: bash
        run: |
          echo "Starting binding regeneration..."

          # Print Git status before generation
          echo "--- Git status BEFORE generation ---"
          git status
          echo "------------------------------------"

          # Store initial state for comparison
          git diff --full-index --binary > before_generation.patch || true # Redirect output to file

          # Build and run the bindgen tool
          cargo build -p stormlib-bindgen --release
          cargo run -p stormlib-bindgen --release

          # Print Git status after generation, before add
          echo "--- Git status AFTER generation (before git add) ---"
          git status
          echo "---------------------------------------------------"

          # Show raw diff before add
          echo "--- Diff AFTER generation (before git add) ---"
          git diff -- crates/stormlib-sys/src/bindings_*.rs || true # Show changes on disk vs HEAD
          echo "------------------------------------------------"

          # Add the generated files to the staging area
          git add crates/stormlib-sys/src/bindings_*.rs

          # Print Git status after add
          echo "--- Git status AFTER git add ---"
          git status
          echo "--------------------------------"

          # Show staged diff
          echo "--- Staged Diff (what git commit would commit) ---"
          git diff --cached -- crates/stormlib-sys/src/bindings_*.rs || true
          echo "--------------------------------------------------"


          # Perform the conditional check and set output
          if ! git diff-index --quiet --cached HEAD; then
            echo "Detected *actual changes* in staged bindings that differ from HEAD."
            echo "bindings_changed=true" >> "$GITHUB_OUTPUT"
          else
            echo "No changes detected in staged bindings compared to HEAD."
          fi
          echo "Final 'bindings_changed' output: ${{ steps.generate_bindings.outputs.bindings_changed }}"
        working-directory: ${{ github.workspace }}

      - name: Commit and Push Changes
        if: |
          steps.generate_bindings.outputs.bindings_changed == 'true' &&
          github.event_name == 'push' &&
          github.ref == 'refs/heads/master'
        run: |
          echo "Committing and pushing generated bindings."
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git commit -m "chore(bindings): Auto-regenerate bindings"
          git push
          echo "Changes committed and pushed successfully."
        working-directory: ${{ github.workspace }}

  test_on_demand: # Rest of the workflow (unchanged)
    runs-on: ${{ matrix.os }}
    if: github.event_name == 'workflow_dispatch'
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
        include:
          - os: macos-latest
          - os: ubuntu-latest
          - os: windows-latest
            LIBCLANG_PATH: "C:\\Program Files\\LLVM\\bin"

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true

      - name: Install LLVM (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y clang libclang-dev

      - name: Install LLVM (Windows)
        if: runner.os == 'Windows'
        uses: egor-tensin/setup-clang@v1
        with:
          version: latest

      - name: Run tests
        run: cargo test --all
        working-directory: ${{ github.workspace }}
