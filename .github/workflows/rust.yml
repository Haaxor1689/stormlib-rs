name: Rust CI

on:
  push:
    branches: [master]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  codegen:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
        include:
          # Define LIBCLANG_PATH for Windows directly within the matrix
          - os: windows-latest
            LIBCLANG_PATH: "C:\\Program Files\\LLVM\\bin"
          # No specific LIBCLANG_PATH needed for macOS/Ubuntu typically

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
          token: ${{ secrets.GITHUB_TOKEN }}

      # Install LLVM/Clang based on OS
      - name: Install LLVM (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y clang libclang-dev

      - name: Install LLVM (Windows)
        if: runner.os == 'Windows'
        uses: egor-tensin/setup-clang@v1
        with:
          version: latest

      - name: Regenerate Bindings
        id: generate_bindings
        shell: bash
        run: |
          echo "Starting binding regeneration for ${{ runner.os }}..."

          # Build and run the bindgen tool for the native OS
          cargo build -p stormlib-bindgen --release
          cargo run -p stormlib-bindgen --release # This will generate bindings_OS.rs based on runner.os's cfg!

          # Determine the expected filename for this OS runner
          generated_file="crates/stormlib-sys/src/bindings_${{ runner.os == 'Windows' && 'windows' || runner.os == 'Linux' && 'linux' || 'macos' }}.rs"

          # Add *only this job's* generated file to the staging area
          git add "$generated_file"

          # Check if there are any staged changes (bash syntax)
          if ! git diff-index --quiet --cached HEAD; then
            echo "Detected changes in generated bindings for ${{ runner.os }}."
            echo "bindings_changed=true" >> "$GITHUB_OUTPUT"
          else
            echo "No changes detected in generated bindings for ${{ runner.os }}."
          fi
          echo "bindings_changed status: ${{ steps.generate_bindings.outputs.bindings_changed }}"
        working-directory: ${{ github.workspace }}

      - name: Commit and Push Changes (with retry for merge conflicts)
        shell: bash
        if: |
          steps.generate_bindings.outputs.bindings_changed == 'true' &&
          github.event_name == 'push' &&
          github.ref == 'refs/heads/master'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          MAX_RETRIES=5
          RETRY_DELAY_SECONDS=5

          for i in $(seq 1 $MAX_RETRIES); do
            echo "Attempt $i to commit and push bindings for ${{ runner.os }}..."
            
            # Fetch latest changes before trying to commit/push
            git pull --rebase origin master || {
              echo "Git pull --rebase failed. Retrying in $RETRY_DELAY_SECONDS seconds..."
              sleep $RETRY_DELAY_SECONDS
              continue
            }
            
            # Re-add the specific file after the rebase, as git pull --rebase can sometimes lose the staged state.
            generated_file="crates/stormlib-sys/src/bindings_${{ runner.os == 'Windows' && 'windows' || runner.os == 'Linux' && 'linux' || 'macos' }}.rs"
            git add "$generated_file"
            
            # Check if there are still changes to commit after rebase
            if git diff-index --quiet --cached HEAD; then
                echo "No changes to commit after rebase. Skipping push."
                exit 0 # Exit successfully if no changes needed anymore
            fi

            git commit -m "chore(bindings): Auto-regenerate bindings for ${{ runner.os }}" && \
            git push origin master && \
            echo "Changes committed and pushed successfully for ${{ runner.os }}." && \
            exit 0 || {
              echo "Git push failed for ${{ runner.os }}. Retrying in $RETRY_DELAY_SECONDS seconds..."
              sleep $RETRY_DELAY_SECONDS
            }
          done

          echo "Failed to commit and push bindings for ${{ runner.os }} after $MAX_RETRIES attempts."
          exit 1
        working-directory: ${{ github.workspace }}

  test_on_demand:
    runs-on: ${{ matrix.os }}
    if: github.event_name == 'workflow_dispatch'
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
        include:
          - os: macos-latest
          - os: ubuntu-latest
          - os: windows-latest
            LIBCLANG_PATH: "C:\\Program Files\\LLVM\\bin"

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true

      - name: Install LLVM (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y clang libclang-dev

      - name: Install LLVM (Windows)
        if: runner.os == 'Windows'
        uses: egor-tensin/setup-clang@v1
        with:
          version: latest

      - name: Run tests
        run: cargo test --all
        working-directory: ${{ github.workspace }}
