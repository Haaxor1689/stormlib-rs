/* automatically generated by rust-bindgen 0.69.5 */

pub const ERROR_SUCCESS: u32 = 0;
pub const ERROR_FILE_NOT_FOUND: u32 = 2;
pub const ERROR_ACCESS_DENIED: u32 = 1;
pub const ERROR_INVALID_HANDLE: u32 = 9;
pub const ERROR_NOT_ENOUGH_MEMORY: u32 = 12;
pub const ERROR_NOT_SUPPORTED: u32 = 45;
pub const ERROR_INVALID_PARAMETER: u32 = 22;
pub const ERROR_NEGATIVE_SEEK: u32 = 29;
pub const ERROR_DISK_FULL: u32 = 28;
pub const ERROR_ALREADY_EXISTS: u32 = 17;
pub const ERROR_INSUFFICIENT_BUFFER: u32 = 55;
pub const ERROR_BAD_FORMAT: u32 = 1000;
pub const ERROR_NO_MORE_FILES: u32 = 1001;
pub const ERROR_HANDLE_EOF: u32 = 1002;
pub const ERROR_CAN_NOT_COMPLETE: u32 = 1003;
pub const ERROR_FILE_CORRUPT: u32 = 1004;
pub const ERROR_BUFFER_OVERFLOW: u32 = 1005;
pub const ERROR_INVALID_DATA: u32 = 1006;
pub const ERROR_NO_UNICODE_TRANSLATION: u32 = 1007;
pub const STORMLIB_VERSION: u32 = 2334;
pub const STORMLIB_VERSION_STRING: &[u8; 5] = b"9.30\0";
pub const ID_MPQ: u32 = 441536589;
pub const ID_MPQ_USERDATA: u32 = 458313805;
pub const ID_MPK: u32 = 441143373;
pub const ERROR_AVI_FILE: u32 = 10000;
pub const ERROR_UNKNOWN_FILE_KEY: u32 = 10001;
pub const ERROR_CHECKSUM_ERROR: u32 = 10002;
pub const ERROR_INTERNAL_FILE: u32 = 10003;
pub const ERROR_BASE_FILE_MISSING: u32 = 10004;
pub const ERROR_MARKED_FOR_DELETE: u32 = 10005;
pub const ERROR_FILE_INCOMPLETE: u32 = 10006;
pub const ERROR_UNKNOWN_FILE_NAMES: u32 = 10007;
pub const ERROR_CANT_FIND_PATCH_PREFIX: u32 = 10008;
pub const ERROR_FAKE_MPQ_HEADER: u32 = 10009;
pub const ERROR_FILE_DELETED: u32 = 10010;
pub const HASH_TABLE_SIZE_MIN: u32 = 4;
pub const HASH_TABLE_SIZE_DEFAULT: u32 = 4096;
pub const HASH_TABLE_SIZE_MAX: u32 = 524288;
pub const HASH_ENTRY_DELETED: u32 = 4294967294;
pub const HASH_ENTRY_FREE: u32 = 4294967295;
pub const HET_ENTRY_DELETED: u32 = 128;
pub const HET_ENTRY_FREE: u32 = 0;
pub const SFILE_OPEN_HARD_DISK_FILE: u32 = 2;
pub const SFILE_OPEN_CDROM_FILE: u32 = 3;
pub const SFILE_OPEN_FROM_MPQ: u32 = 0;
pub const SFILE_OPEN_CHECK_EXISTS: u32 = 4294967292;
pub const SFILE_OPEN_BASE_FILE: u32 = 4294967293;
pub const SFILE_OPEN_ANY_LOCALE: u32 = 4294967294;
pub const SFILE_OPEN_LOCAL_FILE: u32 = 4294967295;
pub const MPQ_FLAG_READ_ONLY: u32 = 1;
pub const MPQ_FLAG_CHANGED: u32 = 2;
pub const MPQ_FLAG_MALFORMED: u32 = 4;
pub const MPQ_FLAG_HASH_TABLE_CUT: u32 = 8;
pub const MPQ_FLAG_BLOCK_TABLE_CUT: u32 = 16;
pub const MPQ_FLAG_CHECK_SECTOR_CRC: u32 = 32;
pub const MPQ_FLAG_SAVING_TABLES: u32 = 64;
pub const MPQ_FLAG_PATCH: u32 = 128;
pub const MPQ_FLAG_WAR3_MAP: u32 = 1024;
pub const MPQ_FLAG_LISTFILE_NONE: u32 = 2048;
pub const MPQ_FLAG_LISTFILE_NEW: u32 = 4096;
pub const MPQ_FLAG_LISTFILE_FORCE: u32 = 8192;
pub const MPQ_FLAG_ATTRIBUTES_NONE: u32 = 16384;
pub const MPQ_FLAG_ATTRIBUTES_NEW: u32 = 32768;
pub const MPQ_FLAG_SIGNATURE_NONE: u32 = 65536;
pub const MPQ_FLAG_SIGNATURE_NEW: u32 = 131072;
pub const MPQ_SUBTYPE_MPQ: u32 = 0;
pub const MPQ_SUBTYPE_SQP: u32 = 1;
pub const MPQ_SUBTYPE_MPK: u32 = 2;
pub const SFILE_INVALID_SIZE: u32 = 4294967295;
pub const SFILE_INVALID_POS: u32 = 4294967295;
pub const SFILE_INVALID_ATTRIBUTES: u32 = 4294967295;
pub const MPQ_FILE_IMPLODE: u32 = 256;
pub const MPQ_FILE_COMPRESS: u32 = 512;
pub const MPQ_FILE_ENCRYPTED: u32 = 65536;
pub const MPQ_FILE_PATCH_FILE: u32 = 1048576;
pub const MPQ_FILE_SINGLE_UNIT: u32 = 16777216;
pub const MPQ_FILE_DELETE_MARKER: u32 = 33554432;
pub const MPQ_FILE_SECTOR_CRC: u32 = 67108864;
pub const MPQ_FILE_SIGNATURE: u32 = 268435456;
pub const MPQ_FILE_EXISTS: u32 = 2147483648;
pub const MPQ_FILE_REPLACEEXISTING: u32 = 2147483648;
pub const MPQ_FILE_COMPRESS_MASK: u32 = 65280;
pub const MPQ_FILE_DEFAULT_INTERNAL: u32 = 4294967295;
pub const MPQ_FILE_FIX_KEY: u32 = 131072;
pub const MPQ_FILE_VALID_FLAGS: u32 = 2534605568;
pub const MPQ_FILE_VALID_FLAGS_W3X: u32 = 2516779776;
pub const BLOCK_INDEX_MASK: u32 = 268435455;
pub const MPQ_COMPRESSION_HUFFMANN: u32 = 1;
pub const MPQ_COMPRESSION_ZLIB: u32 = 2;
pub const MPQ_COMPRESSION_PKWARE: u32 = 8;
pub const MPQ_COMPRESSION_BZIP2: u32 = 16;
pub const MPQ_COMPRESSION_SPARSE: u32 = 32;
pub const MPQ_COMPRESSION_ADPCM_MONO: u32 = 64;
pub const MPQ_COMPRESSION_ADPCM_STEREO: u32 = 128;
pub const MPQ_COMPRESSION_LZMA: u32 = 18;
pub const MPQ_COMPRESSION_NEXT_SAME: u32 = 4294967295;
pub const MPQ_WAVE_QUALITY_HIGH: u32 = 0;
pub const MPQ_WAVE_QUALITY_MEDIUM: u32 = 1;
pub const MPQ_WAVE_QUALITY_LOW: u32 = 2;
pub const HET_TABLE_SIGNATURE: u32 = 441730376;
pub const BET_TABLE_SIGNATURE: u32 = 441730370;
pub const MPQ_KEY_HASH_TABLE: u32 = 3283040112;
pub const MPQ_KEY_BLOCK_TABLE: u32 = 3968054179;
pub const LISTFILE_NAME: &[u8; 11] = b"(listfile)\0";
pub const SIGNATURE_NAME: &[u8; 12] = b"(signature)\0";
pub const ATTRIBUTES_NAME: &[u8; 13] = b"(attributes)\0";
pub const PATCH_METADATA_NAME: &[u8; 17] = b"(patch_metadata)\0";
pub const MPQ_FORMAT_VERSION_1: u32 = 0;
pub const MPQ_FORMAT_VERSION_2: u32 = 1;
pub const MPQ_FORMAT_VERSION_3: u32 = 2;
pub const MPQ_FORMAT_VERSION_4: u32 = 3;
pub const MPQ_ATTRIBUTE_CRC32: u32 = 1;
pub const MPQ_ATTRIBUTE_FILETIME: u32 = 2;
pub const MPQ_ATTRIBUTE_MD5: u32 = 4;
pub const MPQ_ATTRIBUTE_PATCH_BIT: u32 = 8;
pub const MPQ_ATTRIBUTE_ALL: u32 = 15;
pub const MPQ_ATTRIBUTES_V1: u32 = 100;
pub const BASE_PROVIDER_FILE: u32 = 0;
pub const BASE_PROVIDER_MAP: u32 = 1;
pub const BASE_PROVIDER_HTTP: u32 = 2;
pub const BASE_PROVIDER_MASK: u32 = 15;
pub const STREAM_PROVIDER_FLAT: u32 = 0;
pub const STREAM_PROVIDER_PARTIAL: u32 = 16;
pub const STREAM_PROVIDER_MPQE: u32 = 32;
pub const STREAM_PROVIDER_BLOCK4: u32 = 48;
pub const STREAM_PROVIDER_MASK: u32 = 240;
pub const STREAM_FLAG_READ_ONLY: u32 = 256;
pub const STREAM_FLAG_WRITE_SHARE: u32 = 512;
pub const STREAM_FLAG_USE_BITMAP: u32 = 1024;
pub const STREAM_OPTIONS_MASK: u32 = 65280;
pub const STREAM_PROVIDERS_MASK: u32 = 255;
pub const STREAM_FLAGS_MASK: u32 = 65535;
pub const MPQ_OPEN_NO_LISTFILE: u32 = 65536;
pub const MPQ_OPEN_NO_ATTRIBUTES: u32 = 131072;
pub const MPQ_OPEN_NO_HEADER_SEARCH: u32 = 262144;
pub const MPQ_OPEN_FORCE_MPQ_V1: u32 = 524288;
pub const MPQ_OPEN_CHECK_SECTOR_CRC: u32 = 1048576;
pub const MPQ_OPEN_PATCH: u32 = 2097152;
pub const MPQ_OPEN_FORCE_LISTFILE: u32 = 4194304;
pub const MPQ_OPEN_READ_ONLY: u32 = 256;
pub const MPQ_CREATE_LISTFILE: u32 = 1048576;
pub const MPQ_CREATE_ATTRIBUTES: u32 = 2097152;
pub const MPQ_CREATE_SIGNATURE: u32 = 4194304;
pub const MPQ_CREATE_ARCHIVE_V1: u32 = 0;
pub const MPQ_CREATE_ARCHIVE_V2: u32 = 16777216;
pub const MPQ_CREATE_ARCHIVE_V3: u32 = 33554432;
pub const MPQ_CREATE_ARCHIVE_V4: u32 = 50331648;
pub const MPQ_CREATE_ARCHIVE_VMASK: u32 = 251658240;
pub const FLAGS_TO_FORMAT_SHIFT: u32 = 24;
pub const SFILE_VERIFY_SECTOR_CRC: u32 = 1;
pub const SFILE_VERIFY_FILE_CRC: u32 = 2;
pub const SFILE_VERIFY_FILE_MD5: u32 = 4;
pub const SFILE_VERIFY_RAW_MD5: u32 = 8;
pub const SFILE_VERIFY_ALL: u32 = 15;
pub const VERIFY_OPEN_ERROR: u32 = 1;
pub const VERIFY_READ_ERROR: u32 = 2;
pub const VERIFY_FILE_HAS_SECTOR_CRC: u32 = 4;
pub const VERIFY_FILE_SECTOR_CRC_ERROR: u32 = 8;
pub const VERIFY_FILE_HAS_CHECKSUM: u32 = 16;
pub const VERIFY_FILE_CHECKSUM_ERROR: u32 = 32;
pub const VERIFY_FILE_HAS_MD5: u32 = 64;
pub const VERIFY_FILE_MD5_ERROR: u32 = 128;
pub const VERIFY_FILE_HAS_RAW_MD5: u32 = 256;
pub const VERIFY_FILE_RAW_MD5_ERROR: u32 = 512;
pub const VERIFY_FILE_ERROR_MASK: u32 = 683;
pub const SFILE_VERIFY_MPQ_HEADER: u32 = 1;
pub const SFILE_VERIFY_HET_TABLE: u32 = 2;
pub const SFILE_VERIFY_BET_TABLE: u32 = 3;
pub const SFILE_VERIFY_HASH_TABLE: u32 = 4;
pub const SFILE_VERIFY_BLOCK_TABLE: u32 = 5;
pub const SFILE_VERIFY_HIBLOCK_TABLE: u32 = 6;
pub const SFILE_VERIFY_FILE: u32 = 7;
pub const SIGNATURE_TYPE_NONE: u32 = 0;
pub const SIGNATURE_TYPE_WEAK: u32 = 1;
pub const SIGNATURE_TYPE_STRONG: u32 = 2;
pub const ERROR_NO_SIGNATURE: u32 = 0;
pub const ERROR_VERIFY_FAILED: u32 = 1;
pub const ERROR_WEAK_SIGNATURE_OK: u32 = 2;
pub const ERROR_WEAK_SIGNATURE_ERROR: u32 = 3;
pub const ERROR_STRONG_SIGNATURE_OK: u32 = 4;
pub const ERROR_STRONG_SIGNATURE_ERROR: u32 = 5;
pub const MD5_DIGEST_SIZE: u32 = 16;
pub const SHA1_DIGEST_SIZE: u32 = 20;
pub const LANG_NEUTRAL: u32 = 0;
pub const CCB_CHECKING_FILES: u32 = 1;
pub const CCB_CHECKING_HASH_TABLE: u32 = 2;
pub const CCB_COPYING_NON_MPQ_DATA: u32 = 3;
pub const CCB_COMPACTING_FILES: u32 = 4;
pub const CCB_CLOSING_ARCHIVE: u32 = 5;
pub const MPQ_HEADER_SIZE_V1: u32 = 32;
pub const MPQ_HEADER_SIZE_V2: u32 = 44;
pub const MPQ_HEADER_SIZE_V3: u32 = 68;
pub const MPQ_HEADER_SIZE_V4: u32 = 208;
pub const MPQ_HEADER_DWORDS: u32 = 52;
pub type BYTE = ::std::os::raw::c_uchar;
pub type USHORT = ::std::os::raw::c_ushort;
pub type LONG = ::std::os::raw::c_int;
pub type DWORD = ::std::os::raw::c_uint;
pub type ULONGLONG = ::std::os::raw::c_ulonglong;
pub type HANDLE = *mut ::std::os::raw::c_void;
pub type LPOVERLAPPED = *mut ::std::os::raw::c_void;
pub type TCHAR = ::std::os::raw::c_char;
pub type LCID = ::std::os::raw::c_uint;
pub type LPDWORD = *mut DWORD;
pub type LPBYTE = *mut BYTE;
pub type HASH_STRING = ::std::option::Option<
  unsafe extern "C" fn(szFileName: *const ::std::os::raw::c_char, dwHashType: DWORD) -> DWORD,
>;
pub const _SFileInfoClass_SFileMpqFileName: _SFileInfoClass = 0;
pub const _SFileInfoClass_SFileMpqStreamBitmap: _SFileInfoClass = 1;
pub const _SFileInfoClass_SFileMpqUserDataOffset: _SFileInfoClass = 2;
pub const _SFileInfoClass_SFileMpqUserDataHeader: _SFileInfoClass = 3;
pub const _SFileInfoClass_SFileMpqUserData: _SFileInfoClass = 4;
pub const _SFileInfoClass_SFileMpqHeaderOffset: _SFileInfoClass = 5;
pub const _SFileInfoClass_SFileMpqHeaderSize: _SFileInfoClass = 6;
pub const _SFileInfoClass_SFileMpqHeader: _SFileInfoClass = 7;
pub const _SFileInfoClass_SFileMpqHetTableOffset: _SFileInfoClass = 8;
pub const _SFileInfoClass_SFileMpqHetTableSize: _SFileInfoClass = 9;
pub const _SFileInfoClass_SFileMpqHetHeader: _SFileInfoClass = 10;
pub const _SFileInfoClass_SFileMpqHetTable: _SFileInfoClass = 11;
pub const _SFileInfoClass_SFileMpqBetTableOffset: _SFileInfoClass = 12;
pub const _SFileInfoClass_SFileMpqBetTableSize: _SFileInfoClass = 13;
pub const _SFileInfoClass_SFileMpqBetHeader: _SFileInfoClass = 14;
pub const _SFileInfoClass_SFileMpqBetTable: _SFileInfoClass = 15;
pub const _SFileInfoClass_SFileMpqHashTableOffset: _SFileInfoClass = 16;
pub const _SFileInfoClass_SFileMpqHashTableSize64: _SFileInfoClass = 17;
pub const _SFileInfoClass_SFileMpqHashTableSize: _SFileInfoClass = 18;
pub const _SFileInfoClass_SFileMpqHashTable: _SFileInfoClass = 19;
pub const _SFileInfoClass_SFileMpqBlockTableOffset: _SFileInfoClass = 20;
pub const _SFileInfoClass_SFileMpqBlockTableSize64: _SFileInfoClass = 21;
pub const _SFileInfoClass_SFileMpqBlockTableSize: _SFileInfoClass = 22;
pub const _SFileInfoClass_SFileMpqBlockTable: _SFileInfoClass = 23;
pub const _SFileInfoClass_SFileMpqHiBlockTableOffset: _SFileInfoClass = 24;
pub const _SFileInfoClass_SFileMpqHiBlockTableSize64: _SFileInfoClass = 25;
pub const _SFileInfoClass_SFileMpqHiBlockTable: _SFileInfoClass = 26;
pub const _SFileInfoClass_SFileMpqSignatures: _SFileInfoClass = 27;
pub const _SFileInfoClass_SFileMpqStrongSignatureOffset: _SFileInfoClass = 28;
pub const _SFileInfoClass_SFileMpqStrongSignatureSize: _SFileInfoClass = 29;
pub const _SFileInfoClass_SFileMpqStrongSignature: _SFileInfoClass = 30;
pub const _SFileInfoClass_SFileMpqArchiveSize64: _SFileInfoClass = 31;
pub const _SFileInfoClass_SFileMpqArchiveSize: _SFileInfoClass = 32;
pub const _SFileInfoClass_SFileMpqMaxFileCount: _SFileInfoClass = 33;
pub const _SFileInfoClass_SFileMpqFileTableSize: _SFileInfoClass = 34;
pub const _SFileInfoClass_SFileMpqSectorSize: _SFileInfoClass = 35;
pub const _SFileInfoClass_SFileMpqNumberOfFiles: _SFileInfoClass = 36;
pub const _SFileInfoClass_SFileMpqRawChunkSize: _SFileInfoClass = 37;
pub const _SFileInfoClass_SFileMpqStreamFlags: _SFileInfoClass = 38;
pub const _SFileInfoClass_SFileMpqFlags: _SFileInfoClass = 39;
pub const _SFileInfoClass_SFileInfoPatchChain: _SFileInfoClass = 40;
pub const _SFileInfoClass_SFileInfoFileEntry: _SFileInfoClass = 41;
pub const _SFileInfoClass_SFileInfoHashEntry: _SFileInfoClass = 42;
pub const _SFileInfoClass_SFileInfoHashIndex: _SFileInfoClass = 43;
pub const _SFileInfoClass_SFileInfoNameHash1: _SFileInfoClass = 44;
pub const _SFileInfoClass_SFileInfoNameHash2: _SFileInfoClass = 45;
pub const _SFileInfoClass_SFileInfoNameHash3: _SFileInfoClass = 46;
pub const _SFileInfoClass_SFileInfoLocale: _SFileInfoClass = 47;
pub const _SFileInfoClass_SFileInfoFileIndex: _SFileInfoClass = 48;
pub const _SFileInfoClass_SFileInfoByteOffset: _SFileInfoClass = 49;
pub const _SFileInfoClass_SFileInfoFileTime: _SFileInfoClass = 50;
pub const _SFileInfoClass_SFileInfoFileSize: _SFileInfoClass = 51;
pub const _SFileInfoClass_SFileInfoCompressedSize: _SFileInfoClass = 52;
pub const _SFileInfoClass_SFileInfoFlags: _SFileInfoClass = 53;
pub const _SFileInfoClass_SFileInfoEncryptionKey: _SFileInfoClass = 54;
pub const _SFileInfoClass_SFileInfoEncryptionKeyRaw: _SFileInfoClass = 55;
pub const _SFileInfoClass_SFileInfoCRC32: _SFileInfoClass = 56;
pub const _SFileInfoClass_SFileInfoInvalid: _SFileInfoClass = 4095;
pub type _SFileInfoClass = ::std::os::raw::c_uint;
pub use self::_SFileInfoClass as SFileInfoClass;
pub type SFILE_DOWNLOAD_CALLBACK = ::std::option::Option<
  unsafe extern "C" fn(
    pvUserData: *mut ::std::os::raw::c_void,
    ByteOffset: ULONGLONG,
    dwTotalBytes: DWORD,
  ),
>;
pub type SFILE_ADDFILE_CALLBACK = ::std::option::Option<
  unsafe extern "C" fn(
    pvUserData: *mut ::std::os::raw::c_void,
    dwBytesWritten: DWORD,
    dwTotalBytes: DWORD,
    bFinalCall: bool,
  ),
>;
pub type SFILE_COMPACT_CALLBACK = ::std::option::Option<
  unsafe extern "C" fn(
    pvUserData: *mut ::std::os::raw::c_void,
    dwWorkType: DWORD,
    BytesProcessed: ULONGLONG,
    TotalBytes: ULONGLONG,
  ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TFileStream {
  _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TMPQBits {
  _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _TMPQUserData {
  pub dwID: DWORD,
  pub cbUserDataSize: DWORD,
  pub dwHeaderOffs: DWORD,
  pub cbUserDataHeader: DWORD,
}
#[test]
fn bindgen_test_layout__TMPQUserData() {
  const UNINIT: ::std::mem::MaybeUninit<_TMPQUserData> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_TMPQUserData>(),
    16usize,
    concat!("Size of: ", stringify!(_TMPQUserData))
  );
  assert_eq!(
    ::std::mem::align_of::<_TMPQUserData>(),
    4usize,
    concat!("Alignment of ", stringify!(_TMPQUserData))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).dwID) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_TMPQUserData),
      "::",
      stringify!(dwID)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).cbUserDataSize) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_TMPQUserData),
      "::",
      stringify!(cbUserDataSize)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).dwHeaderOffs) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_TMPQUserData),
      "::",
      stringify!(dwHeaderOffs)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).cbUserDataHeader) as usize - ptr as usize },
    12usize,
    concat!(
      "Offset of field: ",
      stringify!(_TMPQUserData),
      "::",
      stringify!(cbUserDataHeader)
    )
  );
}
pub type TMPQUserData = _TMPQUserData;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct _TMPQHeader {
  pub dwID: DWORD,
  pub dwHeaderSize: DWORD,
  pub dwArchiveSize: DWORD,
  pub wFormatVersion: USHORT,
  pub wSectorSize: USHORT,
  pub dwHashTablePos: DWORD,
  pub dwBlockTablePos: DWORD,
  pub dwHashTableSize: DWORD,
  pub dwBlockTableSize: DWORD,
  pub HiBlockTablePos64: ULONGLONG,
  pub wHashTablePosHi: USHORT,
  pub wBlockTablePosHi: USHORT,
  pub ArchiveSize64: ULONGLONG,
  pub BetTablePos64: ULONGLONG,
  pub HetTablePos64: ULONGLONG,
  pub HashTableSize64: ULONGLONG,
  pub BlockTableSize64: ULONGLONG,
  pub HiBlockTableSize64: ULONGLONG,
  pub HetTableSize64: ULONGLONG,
  pub BetTableSize64: ULONGLONG,
  pub dwRawChunkSize: DWORD,
  pub MD5_BlockTable: [::std::os::raw::c_uchar; 16usize],
  pub MD5_HashTable: [::std::os::raw::c_uchar; 16usize],
  pub MD5_HiBlockTable: [::std::os::raw::c_uchar; 16usize],
  pub MD5_BetTable: [::std::os::raw::c_uchar; 16usize],
  pub MD5_HetTable: [::std::os::raw::c_uchar; 16usize],
  pub MD5_MpqHeader: [::std::os::raw::c_uchar; 16usize],
}
#[test]
fn bindgen_test_layout__TMPQHeader() {
  const UNINIT: ::std::mem::MaybeUninit<_TMPQHeader> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_TMPQHeader>(),
    208usize,
    concat!("Size of: ", stringify!(_TMPQHeader))
  );
  assert_eq!(
    ::std::mem::align_of::<_TMPQHeader>(),
    1usize,
    concat!("Alignment of ", stringify!(_TMPQHeader))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).dwID) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_TMPQHeader),
      "::",
      stringify!(dwID)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).dwHeaderSize) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_TMPQHeader),
      "::",
      stringify!(dwHeaderSize)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).dwArchiveSize) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_TMPQHeader),
      "::",
      stringify!(dwArchiveSize)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).wFormatVersion) as usize - ptr as usize },
    12usize,
    concat!(
      "Offset of field: ",
      stringify!(_TMPQHeader),
      "::",
      stringify!(wFormatVersion)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).wSectorSize) as usize - ptr as usize },
    14usize,
    concat!(
      "Offset of field: ",
      stringify!(_TMPQHeader),
      "::",
      stringify!(wSectorSize)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).dwHashTablePos) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(_TMPQHeader),
      "::",
      stringify!(dwHashTablePos)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).dwBlockTablePos) as usize - ptr as usize },
    20usize,
    concat!(
      "Offset of field: ",
      stringify!(_TMPQHeader),
      "::",
      stringify!(dwBlockTablePos)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).dwHashTableSize) as usize - ptr as usize },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(_TMPQHeader),
      "::",
      stringify!(dwHashTableSize)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).dwBlockTableSize) as usize - ptr as usize },
    28usize,
    concat!(
      "Offset of field: ",
      stringify!(_TMPQHeader),
      "::",
      stringify!(dwBlockTableSize)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).HiBlockTablePos64) as usize - ptr as usize },
    32usize,
    concat!(
      "Offset of field: ",
      stringify!(_TMPQHeader),
      "::",
      stringify!(HiBlockTablePos64)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).wHashTablePosHi) as usize - ptr as usize },
    40usize,
    concat!(
      "Offset of field: ",
      stringify!(_TMPQHeader),
      "::",
      stringify!(wHashTablePosHi)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).wBlockTablePosHi) as usize - ptr as usize },
    42usize,
    concat!(
      "Offset of field: ",
      stringify!(_TMPQHeader),
      "::",
      stringify!(wBlockTablePosHi)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ArchiveSize64) as usize - ptr as usize },
    44usize,
    concat!(
      "Offset of field: ",
      stringify!(_TMPQHeader),
      "::",
      stringify!(ArchiveSize64)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).BetTablePos64) as usize - ptr as usize },
    52usize,
    concat!(
      "Offset of field: ",
      stringify!(_TMPQHeader),
      "::",
      stringify!(BetTablePos64)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).HetTablePos64) as usize - ptr as usize },
    60usize,
    concat!(
      "Offset of field: ",
      stringify!(_TMPQHeader),
      "::",
      stringify!(HetTablePos64)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).HashTableSize64) as usize - ptr as usize },
    68usize,
    concat!(
      "Offset of field: ",
      stringify!(_TMPQHeader),
      "::",
      stringify!(HashTableSize64)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).BlockTableSize64) as usize - ptr as usize },
    76usize,
    concat!(
      "Offset of field: ",
      stringify!(_TMPQHeader),
      "::",
      stringify!(BlockTableSize64)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).HiBlockTableSize64) as usize - ptr as usize },
    84usize,
    concat!(
      "Offset of field: ",
      stringify!(_TMPQHeader),
      "::",
      stringify!(HiBlockTableSize64)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).HetTableSize64) as usize - ptr as usize },
    92usize,
    concat!(
      "Offset of field: ",
      stringify!(_TMPQHeader),
      "::",
      stringify!(HetTableSize64)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).BetTableSize64) as usize - ptr as usize },
    100usize,
    concat!(
      "Offset of field: ",
      stringify!(_TMPQHeader),
      "::",
      stringify!(BetTableSize64)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).dwRawChunkSize) as usize - ptr as usize },
    108usize,
    concat!(
      "Offset of field: ",
      stringify!(_TMPQHeader),
      "::",
      stringify!(dwRawChunkSize)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).MD5_BlockTable) as usize - ptr as usize },
    112usize,
    concat!(
      "Offset of field: ",
      stringify!(_TMPQHeader),
      "::",
      stringify!(MD5_BlockTable)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).MD5_HashTable) as usize - ptr as usize },
    128usize,
    concat!(
      "Offset of field: ",
      stringify!(_TMPQHeader),
      "::",
      stringify!(MD5_HashTable)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).MD5_HiBlockTable) as usize - ptr as usize },
    144usize,
    concat!(
      "Offset of field: ",
      stringify!(_TMPQHeader),
      "::",
      stringify!(MD5_HiBlockTable)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).MD5_BetTable) as usize - ptr as usize },
    160usize,
    concat!(
      "Offset of field: ",
      stringify!(_TMPQHeader),
      "::",
      stringify!(MD5_BetTable)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).MD5_HetTable) as usize - ptr as usize },
    176usize,
    concat!(
      "Offset of field: ",
      stringify!(_TMPQHeader),
      "::",
      stringify!(MD5_HetTable)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).MD5_MpqHeader) as usize - ptr as usize },
    192usize,
    concat!(
      "Offset of field: ",
      stringify!(_TMPQHeader),
      "::",
      stringify!(MD5_MpqHeader)
    )
  );
}
pub type TMPQHeader = _TMPQHeader;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _TMPQHash {
  pub dwHashCheck1: DWORD,
  pub dwHashCheck2: DWORD,
  pub Locale: USHORT,
  pub Platform: BYTE,
  pub Flags: BYTE,
  pub dwBlockIndex: DWORD,
}
#[test]
fn bindgen_test_layout__TMPQHash() {
  const UNINIT: ::std::mem::MaybeUninit<_TMPQHash> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_TMPQHash>(),
    16usize,
    concat!("Size of: ", stringify!(_TMPQHash))
  );
  assert_eq!(
    ::std::mem::align_of::<_TMPQHash>(),
    4usize,
    concat!("Alignment of ", stringify!(_TMPQHash))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).dwHashCheck1) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_TMPQHash),
      "::",
      stringify!(dwHashCheck1)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).dwHashCheck2) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_TMPQHash),
      "::",
      stringify!(dwHashCheck2)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Locale) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_TMPQHash),
      "::",
      stringify!(Locale)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Platform) as usize - ptr as usize },
    10usize,
    concat!(
      "Offset of field: ",
      stringify!(_TMPQHash),
      "::",
      stringify!(Platform)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).Flags) as usize - ptr as usize },
    11usize,
    concat!(
      "Offset of field: ",
      stringify!(_TMPQHash),
      "::",
      stringify!(Flags)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).dwBlockIndex) as usize - ptr as usize },
    12usize,
    concat!(
      "Offset of field: ",
      stringify!(_TMPQHash),
      "::",
      stringify!(dwBlockIndex)
    )
  );
}
pub type TMPQHash = _TMPQHash;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _TFileEntry {
  pub FileNameHash: ULONGLONG,
  pub ByteOffset: ULONGLONG,
  pub FileTime: ULONGLONG,
  pub dwFileSize: DWORD,
  pub dwCmpSize: DWORD,
  pub dwFlags: DWORD,
  pub dwCrc32: DWORD,
  pub md5: [BYTE; 16usize],
  pub szFileName: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout__TFileEntry() {
  const UNINIT: ::std::mem::MaybeUninit<_TFileEntry> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_TFileEntry>(),
    64usize,
    concat!("Size of: ", stringify!(_TFileEntry))
  );
  assert_eq!(
    ::std::mem::align_of::<_TFileEntry>(),
    8usize,
    concat!("Alignment of ", stringify!(_TFileEntry))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).FileNameHash) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_TFileEntry),
      "::",
      stringify!(FileNameHash)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).ByteOffset) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_TFileEntry),
      "::",
      stringify!(ByteOffset)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).FileTime) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(_TFileEntry),
      "::",
      stringify!(FileTime)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).dwFileSize) as usize - ptr as usize },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(_TFileEntry),
      "::",
      stringify!(dwFileSize)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).dwCmpSize) as usize - ptr as usize },
    28usize,
    concat!(
      "Offset of field: ",
      stringify!(_TFileEntry),
      "::",
      stringify!(dwCmpSize)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).dwFlags) as usize - ptr as usize },
    32usize,
    concat!(
      "Offset of field: ",
      stringify!(_TFileEntry),
      "::",
      stringify!(dwFlags)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).dwCrc32) as usize - ptr as usize },
    36usize,
    concat!(
      "Offset of field: ",
      stringify!(_TFileEntry),
      "::",
      stringify!(dwCrc32)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).md5) as usize - ptr as usize },
    40usize,
    concat!(
      "Offset of field: ",
      stringify!(_TFileEntry),
      "::",
      stringify!(md5)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).szFileName) as usize - ptr as usize },
    56usize,
    concat!(
      "Offset of field: ",
      stringify!(_TFileEntry),
      "::",
      stringify!(szFileName)
    )
  );
}
pub type TFileEntry = _TFileEntry;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _TMPQHetTable {
  pub pBetIndexes: *mut TMPQBits,
  pub pNameHashes: LPBYTE,
  pub AndMask64: ULONGLONG,
  pub OrMask64: ULONGLONG,
  pub dwEntryCount: DWORD,
  pub dwTotalCount: DWORD,
  pub dwNameHashBitSize: DWORD,
  pub dwIndexSizeTotal: DWORD,
  pub dwIndexSizeExtra: DWORD,
  pub dwIndexSize: DWORD,
}
#[test]
fn bindgen_test_layout__TMPQHetTable() {
  const UNINIT: ::std::mem::MaybeUninit<_TMPQHetTable> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_TMPQHetTable>(),
    56usize,
    concat!("Size of: ", stringify!(_TMPQHetTable))
  );
  assert_eq!(
    ::std::mem::align_of::<_TMPQHetTable>(),
    8usize,
    concat!("Alignment of ", stringify!(_TMPQHetTable))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).pBetIndexes) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_TMPQHetTable),
      "::",
      stringify!(pBetIndexes)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).pNameHashes) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_TMPQHetTable),
      "::",
      stringify!(pNameHashes)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).AndMask64) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(_TMPQHetTable),
      "::",
      stringify!(AndMask64)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).OrMask64) as usize - ptr as usize },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(_TMPQHetTable),
      "::",
      stringify!(OrMask64)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).dwEntryCount) as usize - ptr as usize },
    32usize,
    concat!(
      "Offset of field: ",
      stringify!(_TMPQHetTable),
      "::",
      stringify!(dwEntryCount)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).dwTotalCount) as usize - ptr as usize },
    36usize,
    concat!(
      "Offset of field: ",
      stringify!(_TMPQHetTable),
      "::",
      stringify!(dwTotalCount)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).dwNameHashBitSize) as usize - ptr as usize },
    40usize,
    concat!(
      "Offset of field: ",
      stringify!(_TMPQHetTable),
      "::",
      stringify!(dwNameHashBitSize)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).dwIndexSizeTotal) as usize - ptr as usize },
    44usize,
    concat!(
      "Offset of field: ",
      stringify!(_TMPQHetTable),
      "::",
      stringify!(dwIndexSizeTotal)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).dwIndexSizeExtra) as usize - ptr as usize },
    48usize,
    concat!(
      "Offset of field: ",
      stringify!(_TMPQHetTable),
      "::",
      stringify!(dwIndexSizeExtra)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).dwIndexSize) as usize - ptr as usize },
    52usize,
    concat!(
      "Offset of field: ",
      stringify!(_TMPQHetTable),
      "::",
      stringify!(dwIndexSize)
    )
  );
}
pub type TMPQHetTable = _TMPQHetTable;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _TMPQNamePrefix {
  pub nLength: usize,
  pub szPatchPrefix: [::std::os::raw::c_char; 1usize],
}
#[test]
fn bindgen_test_layout__TMPQNamePrefix() {
  const UNINIT: ::std::mem::MaybeUninit<_TMPQNamePrefix> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_TMPQNamePrefix>(),
    16usize,
    concat!("Size of: ", stringify!(_TMPQNamePrefix))
  );
  assert_eq!(
    ::std::mem::align_of::<_TMPQNamePrefix>(),
    8usize,
    concat!("Alignment of ", stringify!(_TMPQNamePrefix))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).nLength) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_TMPQNamePrefix),
      "::",
      stringify!(nLength)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).szPatchPrefix) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_TMPQNamePrefix),
      "::",
      stringify!(szPatchPrefix)
    )
  );
}
pub type TMPQNamePrefix = _TMPQNamePrefix;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _TMPQArchive {
  pub pStream: *mut TFileStream,
  pub UserDataPos: ULONGLONG,
  pub MpqPos: ULONGLONG,
  pub FileSize: ULONGLONG,
  pub FileOffsetMask: ULONGLONG,
  pub haPatch: *mut _TMPQArchive,
  pub haBase: *mut _TMPQArchive,
  pub pPatchPrefix: *mut TMPQNamePrefix,
  pub pUserData: *mut TMPQUserData,
  pub pHeader: *mut TMPQHeader,
  pub pHashTable: *mut TMPQHash,
  pub pHetTable: *mut TMPQHetTable,
  pub pFileTable: *mut TFileEntry,
  pub pfnHashString: HASH_STRING,
  pub UserData: TMPQUserData,
  pub HeaderData: [DWORD; 52usize],
  pub dwHETBlockSize: DWORD,
  pub dwBETBlockSize: DWORD,
  pub dwMaxFileCount: DWORD,
  pub dwFileTableSize: DWORD,
  pub dwReservedFiles: DWORD,
  pub dwSectorSize: DWORD,
  pub dwFileFlags1: DWORD,
  pub dwFileFlags2: DWORD,
  pub dwFileFlags3: DWORD,
  pub dwAttrFlags: DWORD,
  pub dwValidFileFlags: DWORD,
  pub dwRealHashTableSize: DWORD,
  pub dwFlags: DWORD,
  pub dwSubType: DWORD,
  pub pfnAddFileCB: SFILE_ADDFILE_CALLBACK,
  pub pvAddFileUserData: *mut ::std::os::raw::c_void,
  pub pfnCompactCB: SFILE_COMPACT_CALLBACK,
  pub CompactBytesProcessed: ULONGLONG,
  pub CompactTotalBytes: ULONGLONG,
  pub pvCompactUserData: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout__TMPQArchive() {
  const UNINIT: ::std::mem::MaybeUninit<_TMPQArchive> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_TMPQArchive>(),
    440usize,
    concat!("Size of: ", stringify!(_TMPQArchive))
  );
  assert_eq!(
    ::std::mem::align_of::<_TMPQArchive>(),
    8usize,
    concat!("Alignment of ", stringify!(_TMPQArchive))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).pStream) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_TMPQArchive),
      "::",
      stringify!(pStream)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).UserDataPos) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_TMPQArchive),
      "::",
      stringify!(UserDataPos)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).MpqPos) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(_TMPQArchive),
      "::",
      stringify!(MpqPos)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).FileSize) as usize - ptr as usize },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(_TMPQArchive),
      "::",
      stringify!(FileSize)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).FileOffsetMask) as usize - ptr as usize },
    32usize,
    concat!(
      "Offset of field: ",
      stringify!(_TMPQArchive),
      "::",
      stringify!(FileOffsetMask)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).haPatch) as usize - ptr as usize },
    40usize,
    concat!(
      "Offset of field: ",
      stringify!(_TMPQArchive),
      "::",
      stringify!(haPatch)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).haBase) as usize - ptr as usize },
    48usize,
    concat!(
      "Offset of field: ",
      stringify!(_TMPQArchive),
      "::",
      stringify!(haBase)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).pPatchPrefix) as usize - ptr as usize },
    56usize,
    concat!(
      "Offset of field: ",
      stringify!(_TMPQArchive),
      "::",
      stringify!(pPatchPrefix)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).pUserData) as usize - ptr as usize },
    64usize,
    concat!(
      "Offset of field: ",
      stringify!(_TMPQArchive),
      "::",
      stringify!(pUserData)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).pHeader) as usize - ptr as usize },
    72usize,
    concat!(
      "Offset of field: ",
      stringify!(_TMPQArchive),
      "::",
      stringify!(pHeader)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).pHashTable) as usize - ptr as usize },
    80usize,
    concat!(
      "Offset of field: ",
      stringify!(_TMPQArchive),
      "::",
      stringify!(pHashTable)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).pHetTable) as usize - ptr as usize },
    88usize,
    concat!(
      "Offset of field: ",
      stringify!(_TMPQArchive),
      "::",
      stringify!(pHetTable)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).pFileTable) as usize - ptr as usize },
    96usize,
    concat!(
      "Offset of field: ",
      stringify!(_TMPQArchive),
      "::",
      stringify!(pFileTable)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).pfnHashString) as usize - ptr as usize },
    104usize,
    concat!(
      "Offset of field: ",
      stringify!(_TMPQArchive),
      "::",
      stringify!(pfnHashString)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).UserData) as usize - ptr as usize },
    112usize,
    concat!(
      "Offset of field: ",
      stringify!(_TMPQArchive),
      "::",
      stringify!(UserData)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).HeaderData) as usize - ptr as usize },
    128usize,
    concat!(
      "Offset of field: ",
      stringify!(_TMPQArchive),
      "::",
      stringify!(HeaderData)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).dwHETBlockSize) as usize - ptr as usize },
    336usize,
    concat!(
      "Offset of field: ",
      stringify!(_TMPQArchive),
      "::",
      stringify!(dwHETBlockSize)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).dwBETBlockSize) as usize - ptr as usize },
    340usize,
    concat!(
      "Offset of field: ",
      stringify!(_TMPQArchive),
      "::",
      stringify!(dwBETBlockSize)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).dwMaxFileCount) as usize - ptr as usize },
    344usize,
    concat!(
      "Offset of field: ",
      stringify!(_TMPQArchive),
      "::",
      stringify!(dwMaxFileCount)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).dwFileTableSize) as usize - ptr as usize },
    348usize,
    concat!(
      "Offset of field: ",
      stringify!(_TMPQArchive),
      "::",
      stringify!(dwFileTableSize)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).dwReservedFiles) as usize - ptr as usize },
    352usize,
    concat!(
      "Offset of field: ",
      stringify!(_TMPQArchive),
      "::",
      stringify!(dwReservedFiles)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).dwSectorSize) as usize - ptr as usize },
    356usize,
    concat!(
      "Offset of field: ",
      stringify!(_TMPQArchive),
      "::",
      stringify!(dwSectorSize)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).dwFileFlags1) as usize - ptr as usize },
    360usize,
    concat!(
      "Offset of field: ",
      stringify!(_TMPQArchive),
      "::",
      stringify!(dwFileFlags1)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).dwFileFlags2) as usize - ptr as usize },
    364usize,
    concat!(
      "Offset of field: ",
      stringify!(_TMPQArchive),
      "::",
      stringify!(dwFileFlags2)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).dwFileFlags3) as usize - ptr as usize },
    368usize,
    concat!(
      "Offset of field: ",
      stringify!(_TMPQArchive),
      "::",
      stringify!(dwFileFlags3)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).dwAttrFlags) as usize - ptr as usize },
    372usize,
    concat!(
      "Offset of field: ",
      stringify!(_TMPQArchive),
      "::",
      stringify!(dwAttrFlags)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).dwValidFileFlags) as usize - ptr as usize },
    376usize,
    concat!(
      "Offset of field: ",
      stringify!(_TMPQArchive),
      "::",
      stringify!(dwValidFileFlags)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).dwRealHashTableSize) as usize - ptr as usize },
    380usize,
    concat!(
      "Offset of field: ",
      stringify!(_TMPQArchive),
      "::",
      stringify!(dwRealHashTableSize)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).dwFlags) as usize - ptr as usize },
    384usize,
    concat!(
      "Offset of field: ",
      stringify!(_TMPQArchive),
      "::",
      stringify!(dwFlags)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).dwSubType) as usize - ptr as usize },
    388usize,
    concat!(
      "Offset of field: ",
      stringify!(_TMPQArchive),
      "::",
      stringify!(dwSubType)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).pfnAddFileCB) as usize - ptr as usize },
    392usize,
    concat!(
      "Offset of field: ",
      stringify!(_TMPQArchive),
      "::",
      stringify!(pfnAddFileCB)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).pvAddFileUserData) as usize - ptr as usize },
    400usize,
    concat!(
      "Offset of field: ",
      stringify!(_TMPQArchive),
      "::",
      stringify!(pvAddFileUserData)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).pfnCompactCB) as usize - ptr as usize },
    408usize,
    concat!(
      "Offset of field: ",
      stringify!(_TMPQArchive),
      "::",
      stringify!(pfnCompactCB)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).CompactBytesProcessed) as usize - ptr as usize },
    416usize,
    concat!(
      "Offset of field: ",
      stringify!(_TMPQArchive),
      "::",
      stringify!(CompactBytesProcessed)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).CompactTotalBytes) as usize - ptr as usize },
    424usize,
    concat!(
      "Offset of field: ",
      stringify!(_TMPQArchive),
      "::",
      stringify!(CompactTotalBytes)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).pvCompactUserData) as usize - ptr as usize },
    432usize,
    concat!(
      "Offset of field: ",
      stringify!(_TMPQArchive),
      "::",
      stringify!(pvCompactUserData)
    )
  );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SFILE_FIND_DATA {
  pub cFileName: [::std::os::raw::c_char; 1024usize],
  pub szPlainName: *mut ::std::os::raw::c_char,
  pub dwHashIndex: DWORD,
  pub dwBlockIndex: DWORD,
  pub dwFileSize: DWORD,
  pub dwFileFlags: DWORD,
  pub dwCompSize: DWORD,
  pub dwFileTimeLo: DWORD,
  pub dwFileTimeHi: DWORD,
  pub lcLocale: LCID,
}
#[test]
fn bindgen_test_layout__SFILE_FIND_DATA() {
  const UNINIT: ::std::mem::MaybeUninit<_SFILE_FIND_DATA> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_SFILE_FIND_DATA>(),
    1064usize,
    concat!("Size of: ", stringify!(_SFILE_FIND_DATA))
  );
  assert_eq!(
    ::std::mem::align_of::<_SFILE_FIND_DATA>(),
    8usize,
    concat!("Alignment of ", stringify!(_SFILE_FIND_DATA))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).cFileName) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_SFILE_FIND_DATA),
      "::",
      stringify!(cFileName)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).szPlainName) as usize - ptr as usize },
    1024usize,
    concat!(
      "Offset of field: ",
      stringify!(_SFILE_FIND_DATA),
      "::",
      stringify!(szPlainName)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).dwHashIndex) as usize - ptr as usize },
    1032usize,
    concat!(
      "Offset of field: ",
      stringify!(_SFILE_FIND_DATA),
      "::",
      stringify!(dwHashIndex)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).dwBlockIndex) as usize - ptr as usize },
    1036usize,
    concat!(
      "Offset of field: ",
      stringify!(_SFILE_FIND_DATA),
      "::",
      stringify!(dwBlockIndex)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).dwFileSize) as usize - ptr as usize },
    1040usize,
    concat!(
      "Offset of field: ",
      stringify!(_SFILE_FIND_DATA),
      "::",
      stringify!(dwFileSize)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).dwFileFlags) as usize - ptr as usize },
    1044usize,
    concat!(
      "Offset of field: ",
      stringify!(_SFILE_FIND_DATA),
      "::",
      stringify!(dwFileFlags)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).dwCompSize) as usize - ptr as usize },
    1048usize,
    concat!(
      "Offset of field: ",
      stringify!(_SFILE_FIND_DATA),
      "::",
      stringify!(dwCompSize)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).dwFileTimeLo) as usize - ptr as usize },
    1052usize,
    concat!(
      "Offset of field: ",
      stringify!(_SFILE_FIND_DATA),
      "::",
      stringify!(dwFileTimeLo)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).dwFileTimeHi) as usize - ptr as usize },
    1056usize,
    concat!(
      "Offset of field: ",
      stringify!(_SFILE_FIND_DATA),
      "::",
      stringify!(dwFileTimeHi)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).lcLocale) as usize - ptr as usize },
    1060usize,
    concat!(
      "Offset of field: ",
      stringify!(_SFILE_FIND_DATA),
      "::",
      stringify!(lcLocale)
    )
  );
}
pub type SFILE_FIND_DATA = _SFILE_FIND_DATA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SFILE_CREATE_MPQ {
  pub cbSize: DWORD,
  pub dwMpqVersion: DWORD,
  pub pvUserData: *mut ::std::os::raw::c_void,
  pub cbUserData: DWORD,
  pub dwStreamFlags: DWORD,
  pub dwFileFlags1: DWORD,
  pub dwFileFlags2: DWORD,
  pub dwFileFlags3: DWORD,
  pub dwAttrFlags: DWORD,
  pub dwSectorSize: DWORD,
  pub dwRawChunkSize: DWORD,
  pub dwMaxFileCount: DWORD,
}
#[test]
fn bindgen_test_layout__SFILE_CREATE_MPQ() {
  const UNINIT: ::std::mem::MaybeUninit<_SFILE_CREATE_MPQ> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_SFILE_CREATE_MPQ>(),
    56usize,
    concat!("Size of: ", stringify!(_SFILE_CREATE_MPQ))
  );
  assert_eq!(
    ::std::mem::align_of::<_SFILE_CREATE_MPQ>(),
    8usize,
    concat!("Alignment of ", stringify!(_SFILE_CREATE_MPQ))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).cbSize) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_SFILE_CREATE_MPQ),
      "::",
      stringify!(cbSize)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).dwMpqVersion) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_SFILE_CREATE_MPQ),
      "::",
      stringify!(dwMpqVersion)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).pvUserData) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_SFILE_CREATE_MPQ),
      "::",
      stringify!(pvUserData)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).cbUserData) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(_SFILE_CREATE_MPQ),
      "::",
      stringify!(cbUserData)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).dwStreamFlags) as usize - ptr as usize },
    20usize,
    concat!(
      "Offset of field: ",
      stringify!(_SFILE_CREATE_MPQ),
      "::",
      stringify!(dwStreamFlags)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).dwFileFlags1) as usize - ptr as usize },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(_SFILE_CREATE_MPQ),
      "::",
      stringify!(dwFileFlags1)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).dwFileFlags2) as usize - ptr as usize },
    28usize,
    concat!(
      "Offset of field: ",
      stringify!(_SFILE_CREATE_MPQ),
      "::",
      stringify!(dwFileFlags2)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).dwFileFlags3) as usize - ptr as usize },
    32usize,
    concat!(
      "Offset of field: ",
      stringify!(_SFILE_CREATE_MPQ),
      "::",
      stringify!(dwFileFlags3)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).dwAttrFlags) as usize - ptr as usize },
    36usize,
    concat!(
      "Offset of field: ",
      stringify!(_SFILE_CREATE_MPQ),
      "::",
      stringify!(dwAttrFlags)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).dwSectorSize) as usize - ptr as usize },
    40usize,
    concat!(
      "Offset of field: ",
      stringify!(_SFILE_CREATE_MPQ),
      "::",
      stringify!(dwSectorSize)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).dwRawChunkSize) as usize - ptr as usize },
    44usize,
    concat!(
      "Offset of field: ",
      stringify!(_SFILE_CREATE_MPQ),
      "::",
      stringify!(dwRawChunkSize)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).dwMaxFileCount) as usize - ptr as usize },
    48usize,
    concat!(
      "Offset of field: ",
      stringify!(_SFILE_CREATE_MPQ),
      "::",
      stringify!(dwMaxFileCount)
    )
  );
}
pub type SFILE_CREATE_MPQ = _SFILE_CREATE_MPQ;
pub type PSFILE_CREATE_MPQ = *mut _SFILE_CREATE_MPQ;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SFILE_MARKERS {
  pub dwSize: DWORD,
  pub dwSignature: DWORD,
  pub szHashTableKey: *const ::std::os::raw::c_char,
  pub szBlockTableKey: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout__SFILE_MARKERS() {
  const UNINIT: ::std::mem::MaybeUninit<_SFILE_MARKERS> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<_SFILE_MARKERS>(),
    24usize,
    concat!("Size of: ", stringify!(_SFILE_MARKERS))
  );
  assert_eq!(
    ::std::mem::align_of::<_SFILE_MARKERS>(),
    8usize,
    concat!("Alignment of ", stringify!(_SFILE_MARKERS))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).dwSize) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_SFILE_MARKERS),
      "::",
      stringify!(dwSize)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).dwSignature) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(_SFILE_MARKERS),
      "::",
      stringify!(dwSignature)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).szHashTableKey) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_SFILE_MARKERS),
      "::",
      stringify!(szHashTableKey)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).szBlockTableKey) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(_SFILE_MARKERS),
      "::",
      stringify!(szBlockTableKey)
    )
  );
}
pub type SFILE_MARKERS = _SFILE_MARKERS;
pub type PSFILE_MARKERS = *mut _SFILE_MARKERS;
pub type SFILESETLOCALE = ::std::option::Option<unsafe extern "C" fn(arg1: LCID) -> LCID>;
pub type SFILEOPENARCHIVE = ::std::option::Option<
  unsafe extern "C" fn(
    arg1: *const ::std::os::raw::c_char,
    arg2: DWORD,
    arg3: DWORD,
    arg4: *mut HANDLE,
  ) -> bool,
>;
pub type SFILECLOSEARCHIVE = ::std::option::Option<unsafe extern "C" fn(arg1: HANDLE) -> bool>;
pub type SFILEOPENFILEEX = ::std::option::Option<
  unsafe extern "C" fn(
    arg1: HANDLE,
    arg2: *const ::std::os::raw::c_char,
    arg3: DWORD,
    arg4: *mut HANDLE,
  ) -> bool,
>;
pub type SFILECLOSEFILE = ::std::option::Option<unsafe extern "C" fn(arg1: HANDLE) -> bool>;
pub type SFILEGETFILESIZE =
  ::std::option::Option<unsafe extern "C" fn(arg1: HANDLE, arg2: LPDWORD) -> DWORD>;
pub type SFILESETFILEPOINTER = ::std::option::Option<
  unsafe extern "C" fn(arg1: HANDLE, arg2: LONG, arg3: *mut LONG, arg4: DWORD) -> DWORD,
>;
pub type SFILEREADFILE = ::std::option::Option<
  unsafe extern "C" fn(
    arg1: HANDLE,
    arg2: *mut ::std::os::raw::c_void,
    arg3: DWORD,
    arg4: LPDWORD,
    arg5: LPOVERLAPPED,
  ) -> bool,
>;
extern "C" {
  pub fn SFileSetArchiveMarkers(pMarkers: PSFILE_MARKERS) -> bool;
}
extern "C" {
  pub fn SFileGetLocale() -> LCID;
}
extern "C" {
  pub fn SFileSetLocale(lcFileLocale: LCID) -> LCID;
}
extern "C" {
  pub fn SFileOpenArchive(
    szMpqName: *const TCHAR,
    dwPriority: DWORD,
    dwFlags: DWORD,
    phMpq: *mut HANDLE,
  ) -> bool;
}
extern "C" {
  pub fn SFileCreateArchive(
    szMpqName: *const TCHAR,
    dwCreateFlags: DWORD,
    dwMaxFileCount: DWORD,
    phMpq: *mut HANDLE,
  ) -> bool;
}
extern "C" {
  pub fn SFileCreateArchive2(
    szMpqName: *const TCHAR,
    pCreateInfo: PSFILE_CREATE_MPQ,
    phMpq: *mut HANDLE,
  ) -> bool;
}
extern "C" {
  pub fn SFileSetDownloadCallback(
    hMpq: HANDLE,
    DownloadCB: SFILE_DOWNLOAD_CALLBACK,
    pvUserData: *mut ::std::os::raw::c_void,
  ) -> bool;
}
extern "C" {
  pub fn SFileFlushArchive(hMpq: HANDLE) -> bool;
}
extern "C" {
  pub fn SFileCloseArchive(hMpq: HANDLE) -> bool;
}
extern "C" {
  pub fn SFileAddListFile(hMpq: HANDLE, szListFile: *const TCHAR) -> DWORD;
}
extern "C" {
  pub fn SFileAddListFileEntries(
    hMpq: HANDLE,
    listFileEntries: *mut *const ::std::os::raw::c_char,
    dwEntryCount: DWORD,
  ) -> DWORD;
}
extern "C" {
  pub fn SFileSetCompactCallback(
    hMpq: HANDLE,
    CompactCB: SFILE_COMPACT_CALLBACK,
    pvUserData: *mut ::std::os::raw::c_void,
  ) -> bool;
}
extern "C" {
  pub fn SFileCompactArchive(hMpq: HANDLE, szListFile: *const TCHAR, bReserved: bool) -> bool;
}
extern "C" {
  pub fn SFileGetMaxFileCount(hMpq: HANDLE) -> DWORD;
}
extern "C" {
  pub fn SFileSetMaxFileCount(hMpq: HANDLE, dwMaxFileCount: DWORD) -> bool;
}
extern "C" {
  pub fn SFileGetAttributes(hMpq: HANDLE) -> DWORD;
}
extern "C" {
  pub fn SFileSetAttributes(hMpq: HANDLE, dwFlags: DWORD) -> bool;
}
extern "C" {
  pub fn SFileUpdateFileAttributes(hMpq: HANDLE, szFileName: *const ::std::os::raw::c_char)
    -> bool;
}
extern "C" {
  pub fn SFileOpenPatchArchive(
    hMpq: HANDLE,
    szPatchMpqName: *const TCHAR,
    szPatchPathPrefix: *const ::std::os::raw::c_char,
    dwFlags: DWORD,
  ) -> bool;
}
extern "C" {
  pub fn SFileIsPatchedArchive(hMpq: HANDLE) -> bool;
}
extern "C" {
  pub fn SFileHasFile(hMpq: HANDLE, szFileName: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
  pub fn SFileOpenFileEx(
    hMpq: HANDLE,
    szFileName: *const ::std::os::raw::c_char,
    dwSearchScope: DWORD,
    phFile: *mut HANDLE,
  ) -> bool;
}
extern "C" {
  pub fn SFileGetFileSize(hFile: HANDLE, pdwFileSizeHigh: LPDWORD) -> DWORD;
}
extern "C" {
  pub fn SFileSetFilePointer(
    hFile: HANDLE,
    lFilePos: LONG,
    plFilePosHigh: *mut LONG,
    dwMoveMethod: DWORD,
  ) -> DWORD;
}
extern "C" {
  pub fn SFileReadFile(
    hFile: HANDLE,
    lpBuffer: *mut ::std::os::raw::c_void,
    dwToRead: DWORD,
    pdwRead: LPDWORD,
    lpOverlapped: LPOVERLAPPED,
  ) -> bool;
}
extern "C" {
  pub fn SFileCloseFile(hFile: HANDLE) -> bool;
}
extern "C" {
  pub fn SFileGetFileInfo(
    hMpqOrFile: HANDLE,
    InfoClass: SFileInfoClass,
    pvFileInfo: *mut ::std::os::raw::c_void,
    cbFileInfo: DWORD,
    pcbLengthNeeded: LPDWORD,
  ) -> bool;
}
extern "C" {
  pub fn SFileGetFileName(hFile: HANDLE, szFileName: *mut ::std::os::raw::c_char) -> bool;
}
extern "C" {
  pub fn SFileFreeFileInfo(
    pvFileInfo: *mut ::std::os::raw::c_void,
    InfoClass: SFileInfoClass,
  ) -> bool;
}
extern "C" {
  pub fn SFileExtractFile(
    hMpq: HANDLE,
    szToExtract: *const ::std::os::raw::c_char,
    szExtracted: *const TCHAR,
    dwSearchScope: DWORD,
  ) -> bool;
}
extern "C" {
  pub fn SFileGetFileChecksums(
    hMpq: HANDLE,
    szFileName: *const ::std::os::raw::c_char,
    pdwCrc32: LPDWORD,
    pMD5: *mut ::std::os::raw::c_char,
  ) -> bool;
}
extern "C" {
  pub fn SFileVerifyFile(
    hMpq: HANDLE,
    szFileName: *const ::std::os::raw::c_char,
    dwFlags: DWORD,
  ) -> DWORD;
}
extern "C" {
  pub fn SFileVerifyRawData(
    hMpq: HANDLE,
    dwWhatToVerify: DWORD,
    szFileName: *const ::std::os::raw::c_char,
  ) -> DWORD;
}
extern "C" {
  pub fn SFileSignArchive(hMpq: HANDLE, dwSignatureType: DWORD) -> bool;
}
extern "C" {
  pub fn SFileVerifyArchive(hMpq: HANDLE) -> DWORD;
}
extern "C" {
  pub fn SFileFindFirstFile(
    hMpq: HANDLE,
    szMask: *const ::std::os::raw::c_char,
    lpFindFileData: *mut SFILE_FIND_DATA,
    szListFile: *const TCHAR,
  ) -> HANDLE;
}
extern "C" {
  pub fn SFileFindNextFile(hFind: HANDLE, lpFindFileData: *mut SFILE_FIND_DATA) -> bool;
}
extern "C" {
  pub fn SFileFindClose(hFind: HANDLE) -> bool;
}
extern "C" {
  pub fn SListFileFindFirstFile(
    hMpq: HANDLE,
    szListFile: *const TCHAR,
    szMask: *const ::std::os::raw::c_char,
    lpFindFileData: *mut SFILE_FIND_DATA,
  ) -> HANDLE;
}
extern "C" {
  pub fn SListFileFindNextFile(hFind: HANDLE, lpFindFileData: *mut SFILE_FIND_DATA) -> bool;
}
extern "C" {
  pub fn SListFileFindClose(hFind: HANDLE) -> bool;
}
extern "C" {
  pub fn SFileEnumLocales(
    hMpq: HANDLE,
    szFileName: *const ::std::os::raw::c_char,
    PtrFileLocales: *mut LCID,
    PtrMaxLocales: LPDWORD,
    dwSearchScope: DWORD,
  ) -> DWORD;
}
extern "C" {
  pub fn SFileCreateFile(
    hMpq: HANDLE,
    szArchivedName: *const ::std::os::raw::c_char,
    FileTime: ULONGLONG,
    dwFileSize: DWORD,
    lcFileLocale: LCID,
    dwFlags: DWORD,
    phFile: *mut HANDLE,
  ) -> bool;
}
extern "C" {
  pub fn SFileWriteFile(
    hFile: HANDLE,
    pvData: *const ::std::os::raw::c_void,
    dwSize: DWORD,
    dwCompression: DWORD,
  ) -> bool;
}
extern "C" {
  pub fn SFileFinishFile(hFile: HANDLE) -> bool;
}
extern "C" {
  pub fn SFileAddFileEx(
    hMpq: HANDLE,
    szFileName: *const TCHAR,
    szArchivedName: *const ::std::os::raw::c_char,
    dwFlags: DWORD,
    dwCompression: DWORD,
    dwCompressionNext: DWORD,
  ) -> bool;
}
extern "C" {
  pub fn SFileAddFile(
    hMpq: HANDLE,
    szFileName: *const TCHAR,
    szArchivedName: *const ::std::os::raw::c_char,
    dwFlags: DWORD,
  ) -> bool;
}
extern "C" {
  pub fn SFileAddWave(
    hMpq: HANDLE,
    szFileName: *const TCHAR,
    szArchivedName: *const ::std::os::raw::c_char,
    dwFlags: DWORD,
    dwQuality: DWORD,
  ) -> bool;
}
extern "C" {
  pub fn SFileRemoveFile(
    hMpq: HANDLE,
    szFileName: *const ::std::os::raw::c_char,
    dwSearchScope: DWORD,
  ) -> bool;
}
extern "C" {
  pub fn SFileRenameFile(
    hMpq: HANDLE,
    szOldFileName: *const ::std::os::raw::c_char,
    szNewFileName: *const ::std::os::raw::c_char,
  ) -> bool;
}
extern "C" {
  pub fn SFileSetFileLocale(hFile: HANDLE, lcNewLocale: LCID) -> bool;
}
extern "C" {
  pub fn SFileSetDataCompression(DataCompression: DWORD) -> bool;
}
extern "C" {
  pub fn SFileSetAddFileCallback(
    hMpq: HANDLE,
    AddFileCB: SFILE_ADDFILE_CALLBACK,
    pvUserData: *mut ::std::os::raw::c_void,
  ) -> bool;
}
extern "C" {
  pub fn SCompImplode(
    pvOutBuffer: *mut ::std::os::raw::c_void,
    pcbOutBuffer: *mut ::std::os::raw::c_int,
    pvInBuffer: *mut ::std::os::raw::c_void,
    cbInBuffer: ::std::os::raw::c_int,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn SCompExplode(
    pvOutBuffer: *mut ::std::os::raw::c_void,
    pcbOutBuffer: *mut ::std::os::raw::c_int,
    pvInBuffer: *mut ::std::os::raw::c_void,
    cbInBuffer: ::std::os::raw::c_int,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn SCompCompress(
    pvOutBuffer: *mut ::std::os::raw::c_void,
    pcbOutBuffer: *mut ::std::os::raw::c_int,
    pvInBuffer: *mut ::std::os::raw::c_void,
    cbInBuffer: ::std::os::raw::c_int,
    uCompressionMask: ::std::os::raw::c_uint,
    nCmpType: ::std::os::raw::c_int,
    nCmpLevel: ::std::os::raw::c_int,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn SCompDecompress(
    pvOutBuffer: *mut ::std::os::raw::c_void,
    pcbOutBuffer: *mut ::std::os::raw::c_int,
    pvInBuffer: *mut ::std::os::raw::c_void,
    cbInBuffer: ::std::os::raw::c_int,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn SCompDecompress2(
    pvOutBuffer: *mut ::std::os::raw::c_void,
    pcbOutBuffer: *mut ::std::os::raw::c_int,
    pvInBuffer: *mut ::std::os::raw::c_void,
    cbInBuffer: ::std::os::raw::c_int,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn SMemUTF8ToFileName(
    szBuffer: *mut TCHAR,
    ccBuffer: usize,
    lpString: *const ::std::os::raw::c_void,
    lpStringEnd: *const ::std::os::raw::c_void,
    dwFlags: DWORD,
    pOutLength: *mut usize,
  ) -> DWORD;
}
extern "C" {
  pub fn SMemFileNameToUTF8(
    lpBuffer: *mut ::std::os::raw::c_void,
    ccBuffer: usize,
    szString: *const TCHAR,
    szStringEnd: *const TCHAR,
    dwFlags: DWORD,
    pOutLength: *mut usize,
  ) -> DWORD;
}
extern "C" {
  pub fn SErrSetLastError(dwErrCode: DWORD);
}
extern "C" {
  pub fn SErrGetLastError() -> DWORD;
}
